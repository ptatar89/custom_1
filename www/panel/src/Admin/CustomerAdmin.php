<?php

declare(strict_types=1);

namespace App\Admin;

use App\Entity\Address;
use App\Entity\Customer;
use App\Form\Type\AddressType;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityManagerInterface;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Form\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

final class CustomerAdmin extends AbstractAdmin
{
    private $em;

    public function __construct(string $code, string $class, string $baseControllerName, EntityManagerInterface $entityManager)
    {
        $this->em = $entityManager;
        parent::__construct($code, $class, $baseControllerName);
    }

    protected function configureFormFields(FormMapper $formMapper)
    {
        if ($this->request->get('_sonata_name') === 'admin_app_customer_edit') {
            $formMapper->add('first_name', TextType::class)
                ->add('last_name', TextType::class)
//                ->add('address', \Sonata\Form\Type\CollectionType::class, [
//                    'sonata_admin' => 'admin.address',
//                ])
                ->add('address', CollectionType::class, [
                    'allow_add' => true,
                    'allow_delete' => true,
                    'entry_type' => AddressType::class
                ])
            ;
            return;
        }

        $formMapper->add('first_name', TextType::class)
            ->add('last_name', TextType::class)
           ;

    }

    public function preUpdate($object)
    {

        /** @var ArrayCollection $address */
        $address = $object->getAddress();
        foreach ($address->getIterator() as $item) {
            $item->setCustomerId($object);
        }
        parent::preUpdate($object); // TODO: Change the autogenerated stub
    }

    public function postUpdate($object)
    {
        $r = $this->getRequest()->get($this->getRequest()->get('uniqid'));

        $saveAddress = [];
        foreach ($r['address'] as $item) {
            $saveAddress[] = $item['id'];
        }

        $this->em->clear();

        if (
            count($r['address']) < $this->em->getRepository(Customer::class)
                ->find($object->getId())
                ->getAddress()
                ->count()
        ) {
            foreach (
                $this->em->getRepository(Customer::class)
                    ->find($object->getId())
                    ->getAddress()
                    ->getIterator() as $address
            ) {
                if(!in_array($address->getId(), $saveAddress)) {
                    $addressToDelete = $this->em->getRepository(Address::class)->find($address->getId());
                    $this->em->remove($addressToDelete);
                    $this->em->flush();
                }
            }
        }




        parent::postUpdate($object); // TODO: Change the autogenerated stub
    }

    protected function configureDatagridFilters(DatagridMapper $datagridMapper)
    {
        $datagridMapper->add('first_name')
            ->add('last_name');
    }

    protected function configureListFields(ListMapper $listMapper)
    {
        $listMapper->add('first_name')
            ->add('last_name')
            ->add('_action', null, [
                'actions' => [
                    'edit' => [],
                    'delete' => [],
                ],
            ]);
    }

    public function getBatchActions()
    {
        $actions = parent::getBatchActions();
        unset($actions['delete']);

        return $actions;
    }
}